//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestWebservice.DMCheckService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DMCheckService.IDMCheckService")]
    public interface IDMCheckService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/GetPing", ReplyAction="http://tempuri.org/IDMCheckService/GetPingResponse")]
        string GetPing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/GetPalletInfo", ReplyAction="http://tempuri.org/IDMCheckService/GetPalletInfoResponse")]
        SyncServices.DataManagerServices.DMExportContract GetPalletInfo(string palletNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/GetPalletInfoByRecordId", ReplyAction="http://tempuri.org/IDMCheckService/GetPalletInfoByRecordIdResponse")]
        SyncServices.DataManagerServices.DMExportContract GetPalletInfoByRecordId(long recordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/ConfirmPalletReceive", ReplyAction="http://tempuri.org/IDMCheckService/ConfirmPalletReceiveResponse")]
        bool ConfirmPalletReceive(string palletNum, long recordId, string deviceName, string deviceUser, bool isFromSL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/ConfirmPalletAndLocationReceive", ReplyAction="http://tempuri.org/IDMCheckService/ConfirmPalletAndLocationReceiveResponse")]
        string ConfirmPalletAndLocationReceive(string palletNum, string locationId, long recordId, string deviceName, string deviceUser, bool isFromSL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/CancelPalletReceive", ReplyAction="http://tempuri.org/IDMCheckService/CancelPalletReceiveResponse")]
        bool CancelPalletReceive(string palletNum, long recordId, string deviceName, string deviceUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/UpdateAndConfirmPalletReceive", ReplyAction="http://tempuri.org/IDMCheckService/UpdateAndConfirmPalletReceiveResponse")]
        bool UpdateAndConfirmPalletReceive(SyncServices.DataManagerServices.DMExportContract pallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/PrintAgainPallet", ReplyAction="http://tempuri.org/IDMCheckService/PrintAgainPalletResponse")]
        bool PrintAgainPallet(string palletNum, long recordId, string deviceName, string deviceUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/DMClearPrintAgain", ReplyAction="http://tempuri.org/IDMCheckService/DMClearPrintAgainResponse")]
        SyncServices.DataManagerServices.DMExportMiniContract[] DMClearPrintAgain();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/UpdateOfflinePallets", ReplyAction="http://tempuri.org/IDMCheckService/UpdateOfflinePalletsResponse")]
        SyncServices.DataManagerServices.DMExportContract[] UpdateOfflinePallets(SyncServices.DataManagerServices.DMExportOfflineContract[] lines);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/TransferPalletsToNewLocation", ReplyAction="http://tempuri.org/IDMCheckService/TransferPalletsToNewLocationResponse")]
        SyncServices.LocationHistory[] TransferPalletsToNewLocation(SyncServices.LocationHistory[] lines);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/SummaryPallets", ReplyAction="http://tempuri.org/IDMCheckService/SummaryPalletsResponse")]
        SyncServices.DataManagerServices.DMSummaryContract[] SummaryPallets(string itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/ItemGroupPallets", ReplyAction="http://tempuri.org/IDMCheckService/ItemGroupPalletsResponse")]
        SyncServices.DataManagerServices.DMExportContract[] ItemGroupPallets(string itemId, string grade, string shade, string caliber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/CreateDowntimeForMarpak", ReplyAction="http://tempuri.org/IDMCheckService/CreateDowntimeForMarpakResponse")]
        bool CreateDowntimeForMarpak(int whichMarpak);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/GetProductionByLinesForChart", ReplyAction="http://tempuri.org/IDMCheckService/GetProductionByLinesForChartResponse")]
        SyncServices.ItemForChart[] GetProductionByLinesForChart(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/GetProductionByItemsForChart", ReplyAction="http://tempuri.org/IDMCheckService/GetProductionByItemsForChartResponse")]
        SyncServices.ItemForChart[] GetProductionByItemsForChart(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/GetWHLocations", ReplyAction="http://tempuri.org/IDMCheckService/GetWHLocationsResponse")]
        SyncServices.DataManagerServices.WmsLocationContract[] GetWHLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/GetDuplicatePallets", ReplyAction="http://tempuri.org/IDMCheckService/GetDuplicatePalletsResponse")]
        SyncServices.DuplicatePallet[] GetDuplicatePallets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/ClearDuplicatePallet", ReplyAction="http://tempuri.org/IDMCheckService/ClearDuplicatePalletResponse")]
        bool ClearDuplicatePallet(SyncServices.DuplicatePallet pallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDMCheckService/ClearDuplicatePalletsAll", ReplyAction="http://tempuri.org/IDMCheckService/ClearDuplicatePalletsAllResponse")]
        bool ClearDuplicatePalletsAll(SyncServices.DuplicatePallet[] pallets);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDMCheckServiceChannel : TestWebservice.DMCheckService.IDMCheckService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DMCheckServiceClient : System.ServiceModel.ClientBase<TestWebservice.DMCheckService.IDMCheckService>, TestWebservice.DMCheckService.IDMCheckService {
        
        public DMCheckServiceClient() {
        }
        
        public DMCheckServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DMCheckServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DMCheckServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DMCheckServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetPing() {
            return base.Channel.GetPing();
        }
        
        public SyncServices.DataManagerServices.DMExportContract GetPalletInfo(string palletNum) {
            return base.Channel.GetPalletInfo(palletNum);
        }
        
        public SyncServices.DataManagerServices.DMExportContract GetPalletInfoByRecordId(long recordId) {
            return base.Channel.GetPalletInfoByRecordId(recordId);
        }
        
        public bool ConfirmPalletReceive(string palletNum, long recordId, string deviceName, string deviceUser, bool isFromSL) {
            return base.Channel.ConfirmPalletReceive(palletNum, recordId, deviceName, deviceUser, isFromSL);
        }
        
        public string ConfirmPalletAndLocationReceive(string palletNum, string locationId, long recordId, string deviceName, string deviceUser, bool isFromSL) {
            return base.Channel.ConfirmPalletAndLocationReceive(palletNum, locationId, recordId, deviceName, deviceUser, isFromSL);
        }
        
        public bool CancelPalletReceive(string palletNum, long recordId, string deviceName, string deviceUser) {
            return base.Channel.CancelPalletReceive(palletNum, recordId, deviceName, deviceUser);
        }
        
        public bool UpdateAndConfirmPalletReceive(SyncServices.DataManagerServices.DMExportContract pallet) {
            return base.Channel.UpdateAndConfirmPalletReceive(pallet);
        }
        
        public bool PrintAgainPallet(string palletNum, long recordId, string deviceName, string deviceUser) {
            return base.Channel.PrintAgainPallet(palletNum, recordId, deviceName, deviceUser);
        }
        
        public SyncServices.DataManagerServices.DMExportMiniContract[] DMClearPrintAgain() {
            return base.Channel.DMClearPrintAgain();
        }
        
        public SyncServices.DataManagerServices.DMExportContract[] UpdateOfflinePallets(SyncServices.DataManagerServices.DMExportOfflineContract[] lines) {
            return base.Channel.UpdateOfflinePallets(lines);
        }
        
        public SyncServices.LocationHistory[] TransferPalletsToNewLocation(SyncServices.LocationHistory[] lines) {
            return base.Channel.TransferPalletsToNewLocation(lines);
        }
        
        public SyncServices.DataManagerServices.DMSummaryContract[] SummaryPallets(string itemId) {
            return base.Channel.SummaryPallets(itemId);
        }
        
        public SyncServices.DataManagerServices.DMExportContract[] ItemGroupPallets(string itemId, string grade, string shade, string caliber) {
            return base.Channel.ItemGroupPallets(itemId, grade, shade, caliber);
        }
        
        public bool CreateDowntimeForMarpak(int whichMarpak) {
            return base.Channel.CreateDowntimeForMarpak(whichMarpak);
        }
        
        public SyncServices.ItemForChart[] GetProductionByLinesForChart(System.DateTime date) {
            return base.Channel.GetProductionByLinesForChart(date);
        }
        
        public SyncServices.ItemForChart[] GetProductionByItemsForChart(System.DateTime date) {
            return base.Channel.GetProductionByItemsForChart(date);
        }
        
        public SyncServices.DataManagerServices.WmsLocationContract[] GetWHLocations() {
            return base.Channel.GetWHLocations();
        }
        
        public SyncServices.DuplicatePallet[] GetDuplicatePallets() {
            return base.Channel.GetDuplicatePallets();
        }
        
        public bool ClearDuplicatePallet(SyncServices.DuplicatePallet pallet) {
            return base.Channel.ClearDuplicatePallet(pallet);
        }
        
        public bool ClearDuplicatePalletsAll(SyncServices.DuplicatePallet[] pallets) {
            return base.Channel.ClearDuplicatePalletsAll(pallets);
        }
    }
}
