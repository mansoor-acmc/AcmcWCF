//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestWebservice.SCSyncService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SCSyncService.ISCSyncService")]
    public interface ISCSyncService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCSyncService/GetPing", ReplyAction="http://tempuri.org/ISCSyncService/GetPingResponse")]
        string GetPing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCSyncService/ResetData", ReplyAction="http://tempuri.org/ISCSyncService/ResetDataResponse")]
        SyncServices.ItemEntity[] ResetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCSyncService/GetSCUnitOfMeasure", ReplyAction="http://tempuri.org/ISCSyncService/GetSCUnitOfMeasureResponse")]
        SyncServices.ItemEntity[] GetSCUnitOfMeasure();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCSyncService/GetSCUnitOfMeasureFromAX", ReplyAction="http://tempuri.org/ISCSyncService/GetSCUnitOfMeasureFromAXResponse")]
        SyncServices.InventCountingService.InventForItemUnit[] GetSCUnitOfMeasureFromAX(string allItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCSyncService/GetUserData", ReplyAction="http://tempuri.org/ISCSyncService/GetUserDataResponse")]
        SyncServices.UserData[] GetUserData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCSyncService/UpdateSCDesktop", ReplyAction="http://tempuri.org/ISCSyncService/UpdateSCDesktopResponse")]
        long UpdateSCDesktop(SyncServices.ItemEntity[] dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCSyncService/GetWHLocations", ReplyAction="http://tempuri.org/ISCSyncService/GetWHLocationsResponse")]
        SyncServices.InventCountingService.WmsLocationContract[] GetWHLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISCSyncService/TransferItemsToNewLocation", ReplyAction="http://tempuri.org/ISCSyncService/TransferItemsToNewLocationResponse")]
        SyncServices.InventCountingService.SCForTransfer[] TransferItemsToNewLocation(SyncServices.InventCountingService.SCForTransfer[] lines);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISCSyncServiceChannel : TestWebservice.SCSyncService.ISCSyncService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SCSyncServiceClient : System.ServiceModel.ClientBase<TestWebservice.SCSyncService.ISCSyncService>, TestWebservice.SCSyncService.ISCSyncService {
        
        public SCSyncServiceClient() {
        }
        
        public SCSyncServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SCSyncServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SCSyncServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SCSyncServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetPing() {
            return base.Channel.GetPing();
        }
        
        public SyncServices.ItemEntity[] ResetData() {
            return base.Channel.ResetData();
        }
        
        public SyncServices.ItemEntity[] GetSCUnitOfMeasure() {
            return base.Channel.GetSCUnitOfMeasure();
        }
        
        public SyncServices.InventCountingService.InventForItemUnit[] GetSCUnitOfMeasureFromAX(string allItems) {
            return base.Channel.GetSCUnitOfMeasureFromAX(allItems);
        }
        
        public SyncServices.UserData[] GetUserData() {
            return base.Channel.GetUserData();
        }
        
        public long UpdateSCDesktop(SyncServices.ItemEntity[] dt) {
            return base.Channel.UpdateSCDesktop(dt);
        }
        
        public SyncServices.InventCountingService.WmsLocationContract[] GetWHLocations() {
            return base.Channel.GetWHLocations();
        }
        
        public SyncServices.InventCountingService.SCForTransfer[] TransferItemsToNewLocation(SyncServices.InventCountingService.SCForTransfer[] lines) {
            return base.Channel.TransferItemsToNewLocation(lines);
        }
    }
}
