//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DynamicsTestWin.ModulaMovement {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ModulaMovement.IModulaMovement")]
    public interface IModulaMovement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModulaMovement/OpenItemCode", ReplyAction="http://tempuri.org/IModulaMovement/OpenItemCodeResponse")]
        bool OpenItemCode(int itemId, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModulaMovement/OpenItemCode", ReplyAction="http://tempuri.org/IModulaMovement/OpenItemCodeResponse")]
        System.Threading.Tasks.Task<bool> OpenItemCodeAsync(int itemId, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModulaMovement/ItemsNotUsed", ReplyAction="http://tempuri.org/IModulaMovement/ItemsNotUsedResponse")]
        System.Data.DataTable ItemsNotUsed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModulaMovement/ItemsNotUsed", ReplyAction="http://tempuri.org/IModulaMovement/ItemsNotUsedResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> ItemsNotUsedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModulaMovement/ItemsNotUsedWithWOId", ReplyAction="http://tempuri.org/IModulaMovement/ItemsNotUsedWithWOIdResponse")]
        System.Data.DataTable ItemsNotUsedWithWOId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModulaMovement/ItemsNotUsedWithWOId", ReplyAction="http://tempuri.org/IModulaMovement/ItemsNotUsedWithWOIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> ItemsNotUsedWithWOIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModulaMovement/ItemsUsedButNotPosted", ReplyAction="http://tempuri.org/IModulaMovement/ItemsUsedButNotPostedResponse")]
        System.Data.DataTable ItemsUsedButNotPosted();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModulaMovement/ItemsUsedButNotPosted", ReplyAction="http://tempuri.org/IModulaMovement/ItemsUsedButNotPostedResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> ItemsUsedButNotPostedAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModulaMovementChannel : DynamicsTestWin.ModulaMovement.IModulaMovement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModulaMovementClient : System.ServiceModel.ClientBase<DynamicsTestWin.ModulaMovement.IModulaMovement>, DynamicsTestWin.ModulaMovement.IModulaMovement {
        
        public ModulaMovementClient() {
        }
        
        public ModulaMovementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModulaMovementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModulaMovementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModulaMovementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool OpenItemCode(int itemId, string time) {
            return base.Channel.OpenItemCode(itemId, time);
        }
        
        public System.Threading.Tasks.Task<bool> OpenItemCodeAsync(int itemId, string time) {
            return base.Channel.OpenItemCodeAsync(itemId, time);
        }
        
        public System.Data.DataTable ItemsNotUsed() {
            return base.Channel.ItemsNotUsed();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ItemsNotUsedAsync() {
            return base.Channel.ItemsNotUsedAsync();
        }
        
        public System.Data.DataTable ItemsNotUsedWithWOId() {
            return base.Channel.ItemsNotUsedWithWOId();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ItemsNotUsedWithWOIdAsync() {
            return base.Channel.ItemsNotUsedWithWOIdAsync();
        }
        
        public System.Data.DataTable ItemsUsedButNotPosted() {
            return base.Channel.ItemsUsedButNotPosted();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ItemsUsedButNotPostedAsync() {
            return base.Channel.ItemsUsedButNotPostedAsync();
        }
    }
}
